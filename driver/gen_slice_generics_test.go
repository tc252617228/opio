// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package opio

import (
	"fmt"
	"testing"
	"time"

	zlog "github.com/rs/zerolog/log"
	"github.com/stretchr/testify/assert"
)

func TestFixedSliceInt8(t *testing.T) {
	test_slice_Int8 := []int8{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

	// test correctness
	standard_n, standard_result := EncodeSlice(test_slice_Int8)
	n, result := EncodeSliceInt8(test_slice_Int8)
	zlog.Info().Msgf("standard_result: %x", standard_result)
	assert.Equal(t, standard_n, n, "")
	assert.Equal(t, standard_result, result, "")

	// test speed
	maxSize := 10000 * 1000

	encodeES := time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSlice(test_slice_Int8)
	}
	fmt.Println("encode slice elapsed: ", time.Since(encodeES))

	encodeES = time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSliceInt8(test_slice_Int8)
	}
	fmt.Println("encode Int8 slice elapsed: ", time.Since(encodeES))
}

func TestFixedSliceInt16(t *testing.T) {
	test_slice_Int16 := []int16{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

	// test correctness
	standard_n, standard_result := EncodeSlice(test_slice_Int16)
	n, result := EncodeSliceInt16(test_slice_Int16)
	zlog.Info().Msgf("standard_result: %x", standard_result)
	assert.Equal(t, standard_n, n, "")
	assert.Equal(t, standard_result, result, "")

	// test speed
	maxSize := 10000 * 1000

	encodeES := time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSlice(test_slice_Int16)
	}
	fmt.Println("encode slice elapsed: ", time.Since(encodeES))

	encodeES = time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSliceInt16(test_slice_Int16)
	}
	fmt.Println("encode Int16 slice elapsed: ", time.Since(encodeES))
}

func TestFixedSliceInt32(t *testing.T) {
	test_slice_Int32 := []int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

	// test correctness
	standard_n, standard_result := EncodeSlice(test_slice_Int32)
	n, result := EncodeSliceInt32(test_slice_Int32)
	zlog.Info().Msgf("standard_result: %x", standard_result)
	assert.Equal(t, standard_n, n, "")
	assert.Equal(t, standard_result, result, "")

	// test speed
	maxSize := 10000 * 1000

	encodeES := time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSlice(test_slice_Int32)
	}
	fmt.Println("encode slice elapsed: ", time.Since(encodeES))

	encodeES = time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSliceInt32(test_slice_Int32)
	}
	fmt.Println("encode Int32 slice elapsed: ", time.Since(encodeES))
}

func TestFixedSliceInt64(t *testing.T) {
	test_slice_Int64 := []int64{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

	// test correctness
	standard_n, standard_result := EncodeSlice(test_slice_Int64)
	n, result := EncodeSliceInt64(test_slice_Int64)
	zlog.Info().Msgf("standard_result: %x", standard_result)
	assert.Equal(t, standard_n, n, "")
	assert.Equal(t, standard_result, result, "")

	// test speed
	maxSize := 10000 * 1000

	encodeES := time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSlice(test_slice_Int64)
	}
	fmt.Println("encode slice elapsed: ", time.Since(encodeES))

	encodeES = time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSliceInt64(test_slice_Int64)
	}
	fmt.Println("encode Int64 slice elapsed: ", time.Since(encodeES))
}

func TestFixedSliceFloat32(t *testing.T) {
	test_slice_Float32 := []float32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

	// test correctness
	standard_n, standard_result := EncodeSlice(test_slice_Float32)
	n, result := EncodeSliceFloat32(test_slice_Float32)
	zlog.Info().Msgf("standard_result: %x", standard_result)
	assert.Equal(t, standard_n, n, "")
	assert.Equal(t, standard_result, result, "")

	// test speed
	maxSize := 10000 * 1000

	encodeES := time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSlice(test_slice_Float32)
	}
	fmt.Println("encode slice elapsed: ", time.Since(encodeES))

	encodeES = time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSliceFloat32(test_slice_Float32)
	}
	fmt.Println("encode Float32 slice elapsed: ", time.Since(encodeES))
}

func TestFixedSliceFloat64(t *testing.T) {
	test_slice_Float64 := []float64{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

	// test correctness
	standard_n, standard_result := EncodeSlice(test_slice_Float64)
	n, result := EncodeSliceFloat64(test_slice_Float64)
	zlog.Info().Msgf("standard_result: %x", standard_result)
	assert.Equal(t, standard_n, n, "")
	assert.Equal(t, standard_result, result, "")

	// test speed
	maxSize := 10000 * 1000

	encodeES := time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSlice(test_slice_Float64)
	}
	fmt.Println("encode slice elapsed: ", time.Since(encodeES))

	encodeES = time.Now()
	for i := 0; i < maxSize; i++ {
		EncodeSliceFloat64(test_slice_Float64)
	}
	fmt.Println("encode Float64 slice elapsed: ", time.Since(encodeES))
}
